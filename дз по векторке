import numpy as np

def cramer_solve(A, B):
    """
    Решает СЛАУ методом Крамера.
    :param A: Матрица коэффициентов (n x n).
    :param B: Вектор свободных членов (n x 1).
    :return: Вектор решений (n x 1).
    """
    n = len(A)
    det_A = np.linalg.det(A)  # Определитель основной матрицы

    if det_A == 0:
        raise ValueError("Система не имеет единственного решения (определитель равен нулю).")

    # Создаем пустой вектор для решений
    X = np.zeros(n, dtype=complex)

    for i in range(n):
        # Создаем копию матрицы A и заменяем i-й столбец на вектор B
        Ai = A.copy()
        Ai[:, i] = B
        # Вычисляем определитель новой матрицы
        det_Ai = np.linalg.det(Ai)
        # Находим решение по методу Крамера
        X[i] = det_Ai / det_A

    return X

def main():
    # Пример использования
    # Система уравнений:
    # 2x + 3y = 5
    # 4x + 9y = 21
    A = np.array([[2, 3], [4, 9]], dtype=complex)  # Матрица коэффициентов
    B = np.array([5, 21], dtype=complex)  # Вектор свободных членов

    try:
        solution = cramer_solve(A, B)
        print("Решение системы:")
        for i, x in enumerate(solution):
            print(f"x{i+1} = {x}")
    except ValueError as e:
        print(e)

if __name__ == "__main__":
    main()
